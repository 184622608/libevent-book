include::license.txt[]

:language: C

// FIXME: This part incorporates way too many standards by reference.

Helper functions and types for Libevent
---------------------------------------

The <event2/util.h> header defines many functions that you might find
helpful for implementing portable applications using Libevent.
Libevent uses these types and functions internally.

Basic types
~~~~~~~~~~~

evutil_socket_t
^^^^^^^^^^^^^^^

Most everywhere except Windows, a socket is an int, and the operating
system hands them out in numeric order.  Using the Windows socket API,
however, a socket is of type SOCKET, which is really a pointer-like OS
handle, and the order you receive them is undefined.  We define the
evutil_socket_t type to be an integer that can hold the output of
socket() or accept() wihtout risking pointer truncation on Windows.

.Definition
[code]
--------
#ifdef WIN32
#define evutil_socket_t intptr_t
#else
#define evutil_socket_t int
#endif
--------


Standard integer types
^^^^^^^^^^^^^^^^^^^^^^

Often you will find yourself on a C system that missed out on the 21st
century and therefore does does not implement the standard C99
stdint.h header.  For this situation, Libevent defines its own
versions of the bit-width-specific integers from stdint.h:

[options="header",width="40%"]
|==============================
|  Type      |Width  |Signed
|ev_uint64_t |64     |No
|ev_int64_t  |64     |Yes
|ev_uint32_t |32     |No
|ev_int32_t  |32     |Yes
|ev_uint16_t |16     |No
|ev_int16_t  |16     |Yes
|ev_uint8_t  |8      |No
|ev_int8_t   |8      |Yes
|=============================

Timer portability functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Not every platform defines the standard timeval manipulation functions.

.Interface
[code]
--------
#define evutil_timeradd(tvp, uvp, vvp) /* ... */
#define evutil_timersub(tvp, uvp, vvp) /* ... */
--------

These macros add or subtract (respectively) their first two arguments,
and stores the result in the third.

.Interface
[code]
--------
#define evutil_timerclear(tvp) /* ... */
#define evutil_timerisset(tvp) /* ... */
--------

Clearing a timeval sets its value to zero.  Checking whether it is set
compares its value against zero.

.Interface
[code]
--------
#define	evutil_timercmp(tvp, uvp, cmp)
--------

The evutil_timercmp macro compares two timevals, and yields true if
they are in the relationship specified by the relational operator
'cmp'.  For example, 'evutil_timercmp(t1, t2, <=)' means, "Is t1 <=
t2?"  Note that unlike some operating systems' definitions of
timercmp, all C relational operations are supported.

.Interface
[code]
--------
int evutil_gettimeofday(struct timeval *tv, struct timezone *tz);
--------

The evutil_gettimeofday function sets 'tv' to the current time.  The
tz argument is unused.

.Example
[code]
--------
struct timeval tv1, tv2, tv3;

/* Set tv1 = 5.5 seconds */
tv1.tv_sec = 5; tv1.tv_usec = 500*1000;

/* Set tv2 = now */
evutil_gettimeofday(&tv2, NULL);

/* Set tv3 = 5.5 seconds in the future */
evutil_timeradd(&tv1, &tv2, &tv3);

/* all 3 should print true */
if (evutil_timercmp(&tv1, &tv1, ==))
   puts("5.5 sec == 5.5 sec");
if (evutil_timercmp(&tv3, &tv2, >=))
   puts("The future is after the present.");
if (evutil_timercmp(&tv1, &tv2, <))
   puts("It is no longer the past.");
--------


Socket API compatibility
~~~~~~~~~~~~~~~~~~~~~~~~

This section exists because, for historical reasons, Windows has never
really implemented the Berkeley sockets API in a nice compatible (and
nicely compatible) way.  Here are some functions you can use in order
to pretend that it has.

.Interface
[code]
--------
#define EVUTIL_CLOSESOCKET(s) /* ... */
--------

This macro closes a socket.  On Unix, it's an alias for close(); on
Windows, it calls closesocket().

.Interface
[code]
--------
#define EVUTIL_SOCKET_ERROR()
#define EVUTIL_SET_SOCKET_ERROR(errcode)
#define evutil_socket_geterror(sock)
#define evutil_socket_error_to_string(errcode)
--------

These macros access and manipulate socket error codes.
EVUTIL_SOCKET_ERROR() returns the global error code for the last
socket operation from this thread, and evutil_socket_geterror() does
so for a particular socket.  (Both are errno on Unix.)
EVUTIL_SET_SOCKET_ERROR() changes the current socket error code (like
setting errno on Unix), and evutil_socket_error_to_string() returns a
string representation of a given socket error code (like strerror() on
Unix).

.Interface
[code]
--------
int evutil_make_socket_nonblocking(evutil_socket_t sock);
--------

Even the call you need to do nonblocking IO on a socket is not
portable to Windows.  This function takes a new socket (from socket()
or accept()) and turns it into a nonblocking socket.  (It sets O_NONBLOCK
on Unix and FIONBIO on Windows.)

.Interface
[code]
--------
int evutil_make_listen_socket_reuseable(evutil_socket_t sock);
--------

This function makes sure that the address used by a listener socket
will be available to another socket immediately after the socket is
closed.  (It sets SO_REUSEADDR on Unix and does nothing on Windows.)

.Interface
[code]
--------
int evutil_socketpair(int family, int type, int protocol,
        evutil_socket_t sv[2]);
--------

This function behaves as the Unix socketpair() call: it makes two
sockets that are connected with each other and can be used with
ordinary socket IO calls.

On Windows, this only supports family AF_INET, type SOCK_STREAM, and
protocol 0.  Note that this can fail on some Windows hosts where
firewall software has cleverly firewalled 127.0.0.1 to keep the host
from talking to itself.

Portable string manipulation functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.Interface
[code]
--------
ev_int64_t evutil_strtoll(const char *s, char **endptr, int base);
--------

This function behaves as strtol, but handles 64-bit integers.  On some
platforms, it only supports Base 10.

.Interface
[code]
--------
int evutil_snprintf(char *buf, size_t buflen, const char *format, ...)
	EVUTIL_CHECK_FMT(3,4);
int evutil_vsnprintf(char *buf, size_t buflen, const char *format, va_list ap);
--------

These snprintf-replacement functions behave as the standard snprintf
and vsnprintf interfaces.  (They return the number of bytes that would
have been written into the buffer had it been long enough.)

IPv6 helper and portability functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.Interface
[code]
--------
const char *evutil_inet_ntop(int af, const void *src, char *dst, size_t len);
int evutil_inet_pton(int af, const char *src, void *dst);
--------

These functions behave as the standard inet_ntop() and inet_pton()
functions for parsing and formatting IPv4 and IPv6 addresses.

.Interface
[code]
--------
int evutil_parse_sockaddr_port(const char *str, struct sockaddr *out,
    int *outlen);
--------

This function parses an address from 'str' and writes the result to
'out'.  The 'outlen' argument must point to an integer holding the
number of bytes available in 'out'; it is altered to hold the number
of bytes actually used.  This function returns 0 on success and -1 on
failure.  It recognizes the following address formats:

- [ipv6]:port (as in "[ffff::]:80")
- ipv6 (as in "ffff::")
- [ipv6] (as in "[ffff::]")
- ipv4:port (as in "1.2.3.4:80")
- ipv4 (as in "1.2.3.4")

If no port is given, the port in the resulting sockaddr is set to 0.


Structure macro portability functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.Interface
[code]
--------
#define evutil_offsetof(type, field) /* ... */
--------

As the standard offsetof macro, yields the number of bytes from the
start of 'type' at which 'field' occurs.
