include::license.txt[]

:language: C

Working with an event loop
--------------------------

Running the loop
~~~~~~~~~~~~~~~~

Once you have an event_base with some events registered (see the next section
about how to register events), you will want Libevent to wait for events and
alert you about them.


.Interface
[source]
~~~~~~~~
#define EVLOOP_ONCE	0x01
#define EVLOOP_NONBLOCK	0x02

int event_base_loop(struct event_base *base, int flags);
~~~~~~~~

By default, the event_base_loop() function 'runs' an event_base until there
are no more events registered in it.  To run the loop, it repeatedly checks
whether any of the registered events has triggered (for example, if a read
event's file descriptor is ready to read, or if a timeout event's timeout is
ready to expire).  Once this happens, it marks all triggered events as
"active", and starts to run them.

You can change the behavior of event_base_loop() by setting one or more flags
in its 'flags' argument.  If EVLOOP_ONCE is set, then the loop will stop
immediately after running any active events.  If EVLOOP_NONBLOCK is set, then
the loop will not wait for events to trigger: it will only check whether
any events are ready to trigger immediately.

When it is done, event_base_loop() returns 0 if it exited normally, and -1 if
it exited because of some unhandled error in the backend.

To aid in understanding, here's an approximate summary of the event_base_loop
algorithm:

.Pseudocode
[source]
~~~~~~~~
while (any events are registered with the loop) {

    if (EVLOOP_NONBLOCK was set, or any events are already active)
        If any registered events have triggered, mark them active.
    else
        Wait until at least one event has triggered, and mark it active.

    for (p = 0; p < n_priorities; ++p {
       if (any event with priority of p is active) {
          Run all active events with priority of p.
          break; /* Do not run any events of a less important priority */
       }
    }

    if (EVLOOP_ONCE was set or EVLOOP_NONBLOCK was set)
       break;
}
~~~~~~~~

As a convenience, you can also call:

.Interface
[source]
~~~~~~~~
int event_base_dispatch(struct event_base *base);
~~~~~~~~

The event_base_dispatch() call is the same as event_base_loop(), with no
flags set.

These functions are defined in <event2/event.h>.  They have existed since
before Libevent 1.0.

Stopping the loop
~~~~~~~~~~~~~~~~~

If you want an active event loop to stop running before all events are
removed from it, you have two slightly different functions you can call.

.Interface
[source]
~~~~~~~~
int event_base_loopexit(struct event_base *base,
                        const struct timeval *tv);
int event_base_loopbreak(struct event_base *base);
~~~~~~~~

The event_base_loopexit() function tells an event_base to stop looping after
a given time has elapsed.  If the 'tv' argument is NULL, the event_base stops
looping now.  If the event_base is currently processing any active events,
it will continue processing them, and not exit until it is done.

The event_base_loopbreak() function tells the event_base to exit its loop
immediately.  It differs from event_base_loopexit(base, NULL) in that if
the event_base is currently processing any active events, it will exit
immediately after finishing the one it's currently processing.

Both of these methods return 0 on success and -1 on failure.

.Example: Shut down immediately
[source]
~~~~~~~~
/* Here's a callback function that calls loopbreak */
void cb(int sock, short what, void *arg)
{
    struct event_base *base = arg;
    event_base_loopbreak(base);
}

void main_loop(struct event_base *base)
{
    struct event *watchdog_event;
    int watchdog_fd = get_watchdog_fd();

    /* Construct a new event to trigger whenever there are any bytes to
       read from a watchdog socket.  When that happens, we'll call the
       cb function, which will make the loop exit immediately without
       running any other active events at all.
     */
    watchdog_event = event_new(base, watchdog_fd, EV_READ, cb, base);

    event_add(watchdog_event, NULL);

    event_base_dispatch(base);
}
~~~~~~~~

.Example: Run an event loop for 10 seconds, then exit.
[source]
~~~~~~~~
struct event_base *base;
struct event *ev1, *ev2;
struct timeval ten_sec;

base = event_base_new();

/* We need to get ev1 and ev2 from somewhere. */
ev1 = ...;
ev2 = ...;

event_add(ev1, NULL);
event_add(ev2, NULL);

ten_sec.tv_sec = 10;
ten_sec.tv_usec = 0;

/* Now we run the event_base for a series of 10-second intervals, printing
   "Tick" after each.  For a much better way to implement a 10-second
   timer, see the section below about persistent timer events. */
while (1)
   /* This schedules an exit ten seconds from now. */
   event_base_loopexit(base, &ten_sec);

   event_base_dispatch(base);
   puts("Tick");
}
~~~~~~~~

These functions are declared in <event2/event.h>.  The event_break_loopexit()
function was first implemented in Libevent 1.0c; event_break_loopbreak() was
first implemented in Libevent 1.4.3.

